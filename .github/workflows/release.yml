name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container: debian:10
    steps:
      - name: Install tools
        run: | 
          apt-get update -y && apt-get install -y git curl tar zip build-essential gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-mingw-w64-x86-64

          curl -s -L https://github.com/mislav/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz -o /tmp/hub.tgz
          mkdir /tmp/hub-installer
          tar xf /tmp/hub.tgz --strip-components 1 -C /tmp/hub-installer
          /tmp/hub-installer/install

      - name: Cache downloaded cross-build environment
        id: cache-cross-build-env
        uses: actions/cache@v3
        with:
          path: /tmp/cross-build-env
          key: aarch64_arm_amd64

      - name: Download cross-build environment
        if: steps.cache-cross-build-env.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p /tmp/cross-build-env

          pkg_file=/tmp/cross-build-env/packages

          echo aarch64-linux-musl-cross >> $pkg_file
          echo arm-linux-musleabihf-cross >> $pkg_file
          echo x86_64-linux-musl-cross >> $pkg_file

          base_url=https://github.com/devld/go-drive/releases/download/musl-building-toolchain/

          for i in `cat ${pkg_file}`; do
            url="${base_url}${i}.tgz"
            echo "downloading ${i} from ${url}"
            curl -s -L -o "/tmp/cross-build-env/${i}.tgz" "${url}"
          done

      - name: Setup cross-build environment
        run: |
          set -e

          pkg_file=/tmp/cross-build-env/packages

          for i in `cat ${pkg_file}`; do
            tar xf "/tmp/cross-build-env/${i}.tgz" --strip-components 1 -C /usr/local
          done

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.21.4"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure git
        run: git config --global --add safe.directory $(pwd)
        
      - name: Show building env info
        run: |
          ldd --version
          hub --version
          go version
          npm --version
          node --version
          git log -n1

      - name: Test
        run: go test -v ./...

      - name: Build
        shell: bash
        run: |
          set -e
          export BUILD_VERSION=${GITHUB_REF##*/}
          BUILDS=(  linux_amd64 windows_amd64          linux_arm64           linux_arm               linux_musl_amd64      linux_musl_arm64       linux_musl_arm)
          CGO_ARGS=(gcc         x86_64-w64-mingw32-gcc aarch64-linux-gnu-gcc arm-linux-gnueabihf-gcc x86_64-linux-musl-gcc aarch64-linux-musl-gcc arm-linux-musleabihf-gcc)
          make clean
          for i in "${!BUILDS[@]}"; do
              os_arch=${BUILDS[$i]}
              cgo_cc=${CGO_ARGS[$i]}
              export GOOS=${os_arch%%_*}
              export GOARCH=${os_arch##*_}
              echo building for ${os_arch}
              target=all
              if [ ${GOOS} == 'windows' ]; then
                  target=zip
              fi
              export CC=
              export CGO_ENABLED=1
              if [ ! -z "$cgo_cc" ]; then
                  export CC=${cgo_cc}
              fi
              make ${target} target_name="go-drive_${os_arch}"
          done

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          pwd
          git log -n1
          for i in `find build/ -maxdepth 1 -type f -name '*.tar.gz' -or -name '*.zip'`; do
            echo "adding artifact: ${i}"
            assets="${assets} -a ${i}"
          done
          hub release create -d -p ${assets} -m "Release ${GITHUB_REF##*/}" ${GITHUB_REF##*/}
